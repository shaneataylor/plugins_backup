<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:ditamsg="http://dita-ot.sourceforge.net/ns/200704/ditamsg"
  xmlns:related-links="http://dita-ot.sourceforge.net/ns/200709/related-links"
  exclude-result-prefixes="related-links ditamsg">
  
  <!--main template for setting up all links after the body - applied to the related-links container-->
  <xsl:template match="*[contains(@class,' topic/related-links ')]" name="topic.related-links">
   <div>
      <xsl:call-template name="commonattributes"/>
    
      <xsl:call-template name="ul-child-links"/><!--handle child/descendants outside of linklists in collection-type=unordered or choice-->
    
      <xsl:call-template name="ol-child-links"/><!--handle child/descendants outside of linklists in collection-type=ordered/sequence-->
    
       <!-- OXYGEN PATCH START EXM-17960 - omit links generated by DITA-OT. -->
       <!-- 
         <xsl:call-template name="next-prev-parent-links"/>--><!--handle next and previous links-->
       <!-- OXYGEN PATCH END EXM-17960 - omit links generated by DITA-OT. -->
     
     <xsl:apply-templates select="." mode="related-links:group-unordered-links">
         <xsl:with-param name="nodes" select="descendant::*[contains(@class, ' topic/link ')]
           [count(. | key('omit-from-unordered-links', 1)) != count(key('omit-from-unordered-links', 1))]
           [generate-id(.)=generate-id((key('hideduplicates', concat(ancestor::*[contains(@class, ' topic/related-links ')]/parent::*[contains(@class, ' topic/topic ')]/@id, ' ',@href,@scope,@audience,@platform,@product,@otherprops,@rev,@type,normalize-space(child::*[1]))))[1])]"/>
      </xsl:apply-templates>
    
      <xsl:apply-templates select="*[contains(@class,' topic/linklist ')]"/>
   </div>
  </xsl:template>

  <xsl:template name="makelink">
    <xsl:param name="label"/>
    <xsl:variable name="flagrules">
      <xsl:call-template name="getrules"/>
    </xsl:variable>
    <xsl:call-template name="linkdupinfo"/>
    <xsl:call-template name="start-flags-and-rev">
      <xsl:with-param name="flagrules" select="$flagrules"></xsl:with-param>     
    </xsl:call-template>
    <xsl:apply-templates select="." mode="add-link-highlight-at-start"/>
            <a>
              <xsl:call-template name="commonattributes"/>
              <xsl:apply-templates select="." mode="add-linking-attributes"/>
              <!-- OXYGEN PATCH START EXM-17248 -->
              <!--<xsl:attribute name="onclick">parent.tocwin.expandThis(this.getAttribute('href'))</xsl:attribute>-->
              <xsl:attribute name="title">                
                <xsl:choose>
                  <xsl:when test="*[contains(@class, ' topic/linktext ')]"><xsl:apply-templates select="*[contains(@class, ' topic/linktext ')]"/></xsl:when>
                  <xsl:otherwise><!--use href--><xsl:call-template name="href"/></xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:if test="string-length($label) = 0">
                <xsl:attribute name="class">navheader_parent_path</xsl:attribute>
              </xsl:if>
              
              <!-- OXYGEN PATCH END EXM-17248 -->
              <xsl:apply-templates select="." mode="add-desc-as-hoverhelp"/>
              <!-- OXYGEN PATCH START EXM-17248 -->
              <xsl:choose>
                <xsl:when test="string-length($label) > 0">
                  <xsl:copy-of select="$label"/>
                  <span class="navheader_linktext">
                    <xsl:choose>
                      <xsl:when test="*[contains(@class, ' topic/linktext ')]"><xsl:apply-templates select="*[contains(@class, ' topic/linktext ')]"/></xsl:when>
                      <xsl:otherwise><!--use href--><xsl:call-template name="href"/></xsl:otherwise>
                    </xsl:choose>
                  </span>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:choose>
                    <xsl:when test="*[contains(@class, ' topic/linktext ')]"><xsl:apply-templates select="*[contains(@class, ' topic/linktext ')]"/></xsl:when>
                    <xsl:otherwise><!--use href--><xsl:call-template name="href"/></xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
              <!-- OXYGEN PATCH END EXM-17248 -->
            </a>
    
            <xsl:apply-templates select="." mode="add-link-highlight-at-end"/>
            <xsl:call-template name="end-flags-and-rev">
              <xsl:with-param name="flagrules" select="$flagrules"/>
            </xsl:call-template>
  </xsl:template>
  
<xsl:template match="*" mode="determine-final-href">
  <!-- OXYGEN PATCH START EXM-20602 -->
  <xsl:param name="final-path" tunnel="yes"/>
  <!-- OXYGEN PATCH END EXM-20602 -->
  <xsl:choose>
    <xsl:when test="normalize-space(@href)='' or not(@href)"/>
    <!-- For non-DITA formats - use the href as is -->
    <xsl:when test="(not(@format) and (@type='external' or @scope='external')) or (@format and not(@format='dita' or @format='DITA'))">
      <xsl:value-of select="@href"/>
    </xsl:when>
    <!-- For DITA - process the internal href -->
    <xsl:when test="starts-with(@href,'#')">
      <xsl:call-template name="parsehref">
        <xsl:with-param name="href" select="@href"/>
      </xsl:call-template>
    </xsl:when>
    <!-- It's to a DITA file - process the file name (adding the html extension)
    and process the rest of the href -->
    <!-- for local links respect dita.extname extension 
      and for peer links accept both .xml and .dita bug:3059256-->
    <xsl:when test="((not(@scope) or @scope='local') and contains(@href,$DITAEXT)) or
      (@scope='peer' and (contains(@href,'.xml') or contains(@href,'.dita')))">
      <!-- Added this variable to support href values such as "com.example.dita.stuff/topic.dita". These
           previously generated the output extension after the first .dita -->
      <xsl:variable name="hrefBeforeExtension">
        <xsl:choose>
          <xsl:when test="contains(@href,concat($DITAEXT,'#'))"><xsl:value-of select="substring-before(@href,concat($DITAEXT,'#'))"/></xsl:when>
          <xsl:otherwise><xsl:apply-templates select="." mode="parseHrefUptoExtension"/></xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      
      <!-- OXYGEN PATCH START EXM-20602 -->
      <xsl:choose>
        <xsl:when test="string-length($final-path) > 0">
          <xsl:value-of select="concat(substring-before($final-path, $DITAEXT), $OUTEXT)"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$hrefBeforeExtension"/><xsl:value-of select="$OUTEXT"/>
        </xsl:otherwise>
      </xsl:choose>
      <!-- OXYGEN PATCH END EXM-20602 -->

      <xsl:call-template name="parsehref">
        <xsl:with-param name="href"
            select="substring-after(@href,concat($hrefBeforeExtension,$DITAEXT))"/>
      </xsl:call-template>  
    </xsl:when>
    <xsl:otherwise>
      <xsl:apply-templates select="." mode="ditamsg:unknown-extension"/>
      <xsl:value-of select="@href"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>
  
</xsl:stylesheet>